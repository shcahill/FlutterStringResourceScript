// Create intl_messages.arb and strings_impl.dart (Primary language)
// data:     Spreadsheet data array
// col:      index of translated strings
// folder:   Folder where create the file
function createFlutterPrimaryResources(data, col, folder) {

  var region = "";
  var hasContentsInRegion = false;// if 'true', write `endregion` tag.

  var strings = "";                                      // strings_impl.dart's contents
  var intlMessages = "{\n  \"@@locale\": \"messages\"";  // intl_messages.arb's contents

  // scan all translated strings
  for(var i = ROW_START_INDEX; i < data.length; i++){
    var key = data[i][COL_FLUTTER_KEY];
    
    // skip if flutter-key is empty
    if (key.length == 0) {
      continue;
    }

    // detect `region` tag
    if (key.indexOf('<') == 0) {
      // save `region` tag while prove this region contains contents.
      region = key.slice(1, key.length - 1);
      continue;
    }
    
    // insert `region` tag
    if (region.length > 0) {
      // close previous region tag if need
      if (hasContentsInRegion) {
        strings += "  /// endregion\n\n";
        hasContentsInRegion = false;
      }
      strings += "  /// region " + region + "\n";
      region = ""; // clear region tag
    }
    
    hasContentsInRegion = true;
    var en = convertEscapeCharacter(data[i][col]);
    
    // for strings_impl.dart
    var tags = getTags(en);
    if (tags == null) {
      strings += "  String get " + key + " => Intl.message(\'" + en + "\', name: \"" + key +"\");\n\n";
    } else {
      // strings taking arguments
      strings += "  String " + key + "(" + createArgumentString(tags) + ") => Intl.message(\'" + en + "\', name: \"" + key + "\", args: [" + tags.join(", ") + "]);\n\n";
    }

    // for intl_messages.arb    
    intlMessages += createMessagesArbString(key, en, tags);
  }
  
  if (hasContentsInRegion) {
    strings += "  /// endregion\n\n";
  }
  
  // write in strings_impl.dart
  var sheetUrl = SpreadsheetApp.getActiveSpreadsheet().getUrl();
  var header = "import 'package:intl/intl.dart';\n\n"
             + "// DO NOT EDIT. THIS FILE IS GENERATED by " + sheetUrl + "\n"
             + "mixin StringsImpl {\n";
  var dartFile = createOrGetFile("strings_impl.dart", folder);
  dartFile.setContent(header + strings + "\n}\n");

  // write in intl_messages.arb
  var arbFile = createOrGetFile("intl_messages.arb", folder);
  arbFile.setContent(intlMessages + "\n}");
  
  return [dartFile.getId(), arbFile.getId()];
}

// Create arb-file(without Primary lang)
// language: 
// data:     Spreadsheet data array
// col:      index of translated strings
// folder:   Folder where create the file
function createFlutterResources(language, data, col, folder) {
  var intl = "{\n  \"@@locale\": \"" + language + "\"";
  
  for(var i = ROW_START_INDEX; i < data.length; i++){
    var key = data[i][COL_FLUTTER_KEY];
    // skip if flutter-key is empty
    if (key.length == 0) {
      continue;
    }
   
    // skip region tag
    if (key.indexOf('<') == 0) {
      continue;
    }
    
    // if empty, use primary language
    var str = (data[i][col].length > 0) ? convertEscapeCharacter(data[i][col]) : convertEscapeCharacter(data[i][COL_PRIMARY_LANG]);
    
    // for .arb
    intl += createArbString(key, str);
  }
    
  // intl
  var fileIntl = createOrGetFile("intl_" + language.toLowerCase() + ".arb", folder);
  fileIntl.setContent(intl + "\n}");
  
  return fileIntl.getId();
}

// Create string for arb-file like below:
//   "key": "string",
function createArbString(key, string) {
  return ",\n  \"" + key + "\": \"" + string + "\"";
}

// Create string for intl_messages.arb
function createMessagesArbString(key, string, tags) {
  var ret = ",\n  \"" + key + "\": \"" + string + "\",\n";
  ret += "  \"@" + key + "\": {\n";
  ret += "    \"type\": \"text\",\n";
  ret += "    \"placeholders\": {\n";
  if (tags != null) {
    ret += "      " + joinAsJsonChildren(tags) + "\n";
  }
  ret += "    }\n";
  ret += "  }";

  return ret;
}
